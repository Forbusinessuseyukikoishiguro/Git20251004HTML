# 🐰 Python先生の実践コード解説
**新人エンジニア向け！コメント・docstringの書き方を一行ずつ丁寧に**

---

## 📚 この記事で学べること

1. **コメントとdocstringの違い**
2. **一行ずつのコメントの書き方**
3. **実践的なコツ**
4. **よくある間違いと正しい例**

---

## 1. コメントとdocstringの違い

### 📖 基本ルール

```python
# これは「コメント」 → コードの「なぜ」を説明
def calculate_price():
    """これは「docstring」 → 関数の「何をするか」を説明"""
    pass
```

| 種類 | 記号 | 目的 | 誰が読む？ |
|------|------|------|-----------|
| **コメント** | `#` | コードの意図・理由を説明 | コードを読む人 |
| **docstring** | `"""` | 関数・クラスの使い方を説明 | APIを使う人 |

---

## 2. 実践！一行ずつコメントを書いてみよう

### 🐰 例題：ふわふわ大福店のレジシステム

#### ❌ 悪い例（コメントなし）

```python
from typing import Optional

class DaifukuShop:
    def __init__(self, owner_name: str, stock: int) -> None:
        if stock < 0:
            raise ValueError("在庫数は0以上にしてください")
        self.owner_name = owner_name
        self.stock = stock
        self.sold = 0
        self.revenue = 0
    
    def sell(self, quantity: int, price: int = 150, discount: float = 0) -> Optional[int]:
        if quantity <= 0:
            raise ValueError("個数は1以上にしてください")
        if quantity > self.stock:
            return None
        total = int(quantity * price * (1 - discount))
        self.stock -= quantity
        self.sold += quantity
        self.revenue += total
        return total
```

**問題点：**
- 何をしているかわからない
- なぜその処理をしているか不明
- 数値の意味が不明

---

#### ✅ 良い例（適切なコメント + docstring）

```python
from typing import Optional

class DaifukuShop:
    """
    大福店の在庫・販売管理クラス
    
    Args:
        owner_name: 店長の名前
        stock: 初期在庫数
    
    Attributes:
        owner_name: 店長の名前
        stock: 現在の在庫数
        sold: 累計販売数
        revenue: 累計売上金額
    """
    
    def __init__(self, owner_name: str, stock: int) -> None:
        """
        大福店を初期化する
        
        Args:
            owner_name: 店長の名前
            stock: 初期在庫数（0以上）
        
        Raises:
            ValueError: stockが負の数の場合
        """
        # バリデーション: 在庫数は負にできない
        if stock < 0:
            raise ValueError("在庫数は0以上にしてください")
        
        # インスタンス変数の初期化
        self.owner_name = owner_name  # 店長名を保存
        self.stock = stock            # 現在の在庫数
        self.sold = 0                 # 累計販売数（初期値0）
        self.revenue = 0              # 累計売上（初期値0円）
    
    def sell(
        self,
        quantity: int,
        price: int = 150,      # デフォルト単価: 150円
        discount: float = 0    # デフォルト割引率: 0%
    ) -> Optional[int]:
        """
        大福を販売して売上を計算する
        
        Args:
            quantity: 販売個数
            price: 単価（円）。デフォルトは150円
            discount: 割引率（0.0-1.0）。デフォルトは0
        
        Returns:
            売上金額（円）。在庫不足の場合はNone
        
        Raises:
            ValueError: quantityが0以下の場合
        
        Example:
            >>> shop = DaifukuShop("うさうさ", 20)
            >>> shop.sell(5)
            750
            >>> shop.sell(3, discount=0.1)  # 10%割引
            405
        """
        # バリデーション: 販売個数は1以上必須
        if quantity <= 0:
            raise ValueError("個数は1以上にしてください")
        
        # 在庫チェック: 足りない場合は販売不可
        if quantity > self.stock:
            return None  # Noneを返して在庫不足を通知
        
        # 売上計算: 単価 × 個数 × (1 - 割引率)
        # int()で小数点以下切り捨て
        total = int(quantity * price * (1 - discount))
        
        # 在庫と販売数を更新
        self.stock -= quantity    # 在庫を減らす
        self.sold += quantity     # 累計販売数を増やす
        self.revenue += total     # 累計売上に加算
        
        # 売上金額を返す
        return total
```

---

## 3. コメントを書く5つのコツ

### 💡 コツ1: 「何を」ではなく「なぜ」を書く

#### ❌ 悪い例

```python
# iに1を足す
i = i + 1

# stockが10より大きいかチェック
if stock > 10:
    # discountを0.1にする
    discount = 0.1
```

**問題:** コードを見ればわかることを書いている

#### ✅ 良い例

```python
# カウンターをインクリメント（ループの次の要素へ）
i = i + 1

# 大量購入割引: 11個以上で10%オフ
if stock > 10:
    discount = 0.1  # 10%割引を適用
```

**ポイント:** なぜその処理が必要か、ビジネスロジックを説明

---

### 💡 コツ2: マジックナンバーには必ずコメント

#### ❌ 悪い例

```python
if age >= 20:
    can_buy = True

total = price * 1.1

if score > 80:
    grade = "A"
```

**問題:** 数値の意味が不明

#### ✅ 良い例

```python
LEGAL_AGE = 20  # 成人年齢（日本）
if age >= LEGAL_AGE:
    can_buy = True

TAX_RATE = 1.1  # 消費税10%
total = price * TAX_RATE

A_GRADE_THRESHOLD = 80  # A評価のボーダーライン
if score > A_GRADE_THRESHOLD:
    grade = "A"
```

**ポイント:** 定数化 + コメントで意味を明確に

---

### 💡 コツ3: 複雑なロジックは段階的にコメント

#### ❌ 悪い例

```python
def calculate_shipping_fee(items, weight, distance):
    if len(items) > 10 and weight < 5000:
        base = 500
    elif distance > 100:
        base = 1000 + (distance - 100) * 10
    else:
        base = 800
    
    if weight > 3000:
        base += (weight - 3000) // 1000 * 200
    
    return base
```

**問題:** ロジックが複雑で追いづらい

#### ✅ 良い例

```python
def calculate_shipping_fee(items: list, weight: int, distance: int) -> int:
    """
    配送料を計算する
    
    Args:
        items: 商品リスト
        weight: 総重量（グラム）
        distance: 配送距離（km）
    
    Returns:
        配送料（円）
    """
    # ステップ1: 基本料金を決定
    if len(items) > 10 and weight < 5000:
        # 大量注文 & 軽量 → 割引適用
        base = 500
    elif distance > 100:
        # 遠距離配送 → 距離に応じた追加料金
        base = 1000 + (distance - 100) * 10  # 100km超過分は1kmあたり10円
    else:
        # 通常配送
        base = 800
    
    # ステップ2: 重量による追加料金
    HEAVY_THRESHOLD = 3000  # 3kg以上は追加料金
    if weight > HEAVY_THRESHOLD:
        # 3kgを超える1kgごとに200円追加
        extra_weight = weight - HEAVY_THRESHOLD
        base += (extra_weight // 1000) * 200
    
    return base
```

**ポイント:** 
- ステップごとにコメント
- 定数を使って計算式を説明
- 条件の意味を明記

---

### 💡 コツ4: TODOとFIXMEを使い分ける

```python
class DaifukuShop:
    def sell(self, quantity: int) -> Optional[int]:
        """大福を販売する"""
        
        # TODO: ポイント還元機能を追加予定（2025年4月リリース）
        # 購入金額の1%をポイントとして付与
        
        # FIXME: 在庫が0の時のエラーメッセージが不親切
        # 「在庫なし」だけでなく、次回入荷日も表示したい
        if quantity > self.stock:
            return None
        
        # HACK: 暫定対応。本来はDBから取得すべき
        # チケット #1234 で対応予定
        price = 150
        
        # NOTE: この計算式は経理部門と合意済み（2024/12/01）
        total = quantity * price
        
        return total
```

**コメントタグの使い分け:**

| タグ | 意味 | 使う場面 |
|------|------|---------|
| `TODO` | やるべきこと | 将来実装する機能 |
| `FIXME` | 修正が必要 | 既知のバグや改善点 |
| `HACK` | 暫定対応 | 本来の実装ではない |
| `NOTE` | 重要な注意 | 特別な理由や背景 |
| `XXX` | 危険・注意 | 特に注意が必要な箇所 |

---

### 💡 コツ5: 関数・クラスには必ずdocstring

#### ✅ 完璧な例

```python
from typing import Optional, List, Dict

class DaifukuShop:
    """
    大福専門店の在庫・販売管理システム
    
    このクラスは大福の在庫管理、販売処理、売上集計を行います。
    
    Attributes:
        owner_name: 店長の名前
        stock: 現在の在庫数
        sold: 累計販売数
        revenue: 累計売上金額（円）
    
    Example:
        >>> shop = DaifukuShop("うさうさ", 20)
        >>> shop.sell(5)
        750
        >>> shop.get_stats()
        {'owner': 'うさうさ', 'stock': 15, 'sold': 5, 'revenue': 750}
    """
    
    # クラス定数: 全店舗共通の設定
    DEFAULT_PRICE = 150      # デフォルト単価（円）
    TAX_RATE = 1.1          # 消費税率
    BULK_DISCOUNT = 0.1     # 大量購入割引率（10%）
    
    def __init__(self, owner_name: str, stock: int) -> None:
        """
        大福店を初期化する
        
        Args:
            owner_name: 店長の名前
            stock: 初期在庫数（0以上の整数）
        
        Raises:
            ValueError: stockが負の数の場合
        
        Example:
            >>> shop = DaifukuShop("うさうさ", 20)
        """
        # バリデーション
        if stock < 0:
            raise ValueError("在庫数は0以上にしてください")
        
        # 初期化
        self.owner_name = owner_name
        self.stock = stock
        self.sold = 0
        self.revenue = 0
    
    def sell(
        self,
        quantity: int,
        price: int = DEFAULT_PRICE,
        discount: float = 0
    ) -> Optional[int]:
        """
        大福を販売して売上を計算する
        
        在庫から指定個数を減らし、売上を計算します。
        在庫不足の場合は販売せずNoneを返します。
        
        Args:
            quantity: 販売個数（1以上）
            price: 単価（円）。省略時はDEFAULT_PRICE
            discount: 割引率（0.0-1.0）。0で割引なし
        
        Returns:
            売上金額（円）。在庫不足の場合はNone
        
        Raises:
            ValueError: quantityが0以下の場合
        
        Example:
            >>> shop = DaifukuShop("うさうさ", 20)
            >>> shop.sell(5)
            750
            >>> shop.sell(10, discount=0.1)  # 10%割引
            1350
            >>> shop.sell(100)  # 在庫不足
            None
        
        Note:
            - 在庫不足の場合、在庫数は変更されません
            - 割引後の金額は小数点以下切り捨て
        """
        # ステップ1: バリデーション
        if quantity <= 0:
            raise ValueError("個数は1以上にしてください")
        
        # ステップ2: 在庫チェック
        if quantity > self.stock:
            # 在庫不足: 何も変更せずNoneを返す
            return None
        
        # ステップ3: 売上計算
        # 計算式: 個数 × 単価 × (1 - 割引率)
        total = int(quantity * price * (1 - discount))
        
        # ステップ4: 在庫と売上を更新
        self.stock -= quantity     # 在庫を減らす
        self.sold += quantity      # 累計販売数を増やす
        self.revenue += total      # 累計売上に加算
        
        # ステップ5: 売上金額を返す
        return total
    
    def restock(self, quantity: int) -> None:
        """
        在庫を補充する
        
        Args:
            quantity: 補充個数（1以上）
        
        Raises:
            ValueError: quantityが0以下の場合
        
        Example:
            >>> shop = DaifukuShop("うさうさ", 10)
            >>> shop.restock(20)
            >>> shop.stock
            30
        """
        if quantity <= 0:
            raise ValueError("補充個数は1以上にしてください")
        
        # 在庫に加算
        self.stock += quantity
    
    def get_stats(self) -> Dict[str, any]:
        """
        店舗の統計情報を取得する
        
        Returns:
            以下のキーを持つ辞書:
                - owner: 店長名
                - stock: 現在の在庫数
                - sold: 累計販売数
                - revenue: 累計売上（円）
        
        Example:
            >>> shop = DaifukuShop("うさうさ", 20)
            >>> shop.sell(5)
            750
            >>> shop.get_stats()
            {'owner': 'うさうさ', 'stock': 15, 'sold': 5, 'revenue': 750}
        """
        return {
            'owner': self.owner_name,
            'stock': self.stock,
            'sold': self.sold,
            'revenue': self.revenue
        }
    
    def apply_bulk_discount(self, quantity: int) -> float:
        """
        大量購入割引を適用すべきか判定する
        
        10個以上の購入で10%割引を適用します。
        
        Args:
            quantity: 購入個数
        
        Returns:
            適用する割引率（0.0-1.0）
        
        Example:
            >>> shop = DaifukuShop("うさうさ", 20)
            >>> shop.apply_bulk_discount(5)
            0.0
            >>> shop.apply_bulk_discount(15)
            0.1
        """
        # 大量購入の閾値
        BULK_THRESHOLD = 10
        
        # 10個以上で割引適用
        if quantity >= BULK_THRESHOLD:
            return self.BULK_DISCOUNT
        else:
            return 0.0
```

---

## 4. よくある間違いと正しい書き方

### ❌ 間違い1: コメントアウトしたコードを残す

```python
def calculate_total(quantity: int, price: int) -> int:
    # 古い計算方法（削除予定）
    # total = quantity * price
    # tax = total * 0.08
    # return total + tax
    
    # 新しい計算方法
    return int(quantity * price * 1.1)
```

**問題:** コードが読みにくくなる

#### ✅ 正しい書き方

```python
def calculate_total(quantity: int, price: int) -> int:
    """
    合計金額を計算する（消費税10%込み）
    
    Note:
        2024年10月から消費税率を8%→10%に変更
    """
    TAX_RATE = 1.1  # 消費税10%
    return int(quantity * price * TAX_RATE)
```

**ポイント:** 
- 古いコードは削除
- 変更理由はdocstringに記載
- Git履歴で過去のコードは確認可能

---

### ❌ 間違い2: 冗長なコメント

```python
# DaifukuShopクラスを定義
class DaifukuShop:
    # __init__メソッドを定義
    def __init__(self, owner_name, stock):
        # owner_nameをself.owner_nameに代入
        self.owner_name = owner_name
        # stockをself.stockに代入
        self.stock = stock
```

**問題:** コードを見ればわかることを書いている

#### ✅ 正しい書き方

```python
class DaifukuShop:
    """大福店の在庫・販売管理クラス"""
    
    def __init__(self, owner_name: str, stock: int) -> None:
        """
        店舗を初期化する
        
        Args:
            owner_name: 店長の名前
            stock: 初期在庫数
        """
        self.owner_name = owner_name
        self.stock = stock
```

**ポイント:** コメントではなくdocstringで「何をするか」を説明

---

### ❌ 間違い3: コメントが古くなっている

```python
def sell(self, quantity: int) -> Optional[int]:
    # 在庫から引く（2023年版）
    # 割引は適用しない
    self.stock -= quantity
    
    # 2024年追加: 割引機能
    discount = 0.1
    total = int(quantity * 150 * (1 - discount))
    
    return total
```

**問題:** コメントとコードが一致していない

#### ✅ 正しい書き方

```python
def sell(self, quantity: int, discount: float = 0.1) -> Optional[int]:
    """
    大福を販売する（割引適用版）
    
    Args:
        quantity: 販売個数
        discount: 割引率。デフォルトは0.1（10%オフ）
    
    Returns:
        売上金額（割引後）
    
    Note:
        2024年4月より全商品10%割引キャンペーン実施中
    """
    # 在庫を減らす
    self.stock -= quantity
    
    # 割引後の売上を計算
    DEFAULT_PRICE = 150
    total = int(quantity * DEFAULT_PRICE * (1 - discount))
    
    return total
```

**ポイント:** コードを変更したらコメントも必ず更新

---

## 5. 実践チェックリスト

### ✅ コメントを書く前にチェック

```
【必須】
□ docstringは書いたか？
□ マジックナンバーに定数名をつけたか？
□ 複雑なロジックに段階的コメントをつけたか？
□ TODOやFIXMEで課題を記録したか？

【禁止】
□ コードと同じことを書いていないか？
□ 古いコメントアウトを残していないか？
□ コメントとコードが矛盾していないか？

【推奨】
□ 「なぜ」を書いているか？（「何を」ではなく）
□ ビジネスロジックを説明しているか？
□ 将来の自分が読んでわかるか？
```

---

## 6. 練習問題

### 問題1: このコードにコメントとdocstringを追加してください

```python
def calculate_point(price, is_member):
    if is_member:
        if price >= 10000:
            return int(price * 0.05)
        else:
            return int(price * 0.03)
    else:
        return int(price * 0.01)
```

<details>
<summary>解答例を見る</summary>

```python
def calculate_point(price: int, is_member: bool) -> int:
    """
    購入金額に応じたポイントを計算する
    
    会員ステータスと購入金額に応じて、以下のポイント還元率を適用:
    - 会員 & 10,000円以上: 5%
    - 会員 & 10,000円未満: 3%
    - 非会員: 1%
    
    Args:
        price: 購入金額（円）
        is_member: 会員かどうか
    
    Returns:
        付与ポイント数（小数点以下切り捨て）
    
    Example:
        >>> calculate_point(15000, True)   # 会員・高額
        750
        >>> calculate_point(5000, True)    # 会員・通常
        150
        >>> calculate_point(5000, False)   # 非会員
        50
    """
    # ポイント還元率の定数定義
    PREMIUM_RATE = 0.05      # 会員・高額購入: 5%
    MEMBER_RATE = 0.03       # 会員・通常購入: 3%
    GUEST_RATE = 0.01        # 非会員: 1%
    HIGH_PRICE_THRESHOLD = 10000  # 高額購入の基準額
    
    if is_member:
        # 会員の場合: 購入金額で還元率を変える
        if price >= HIGH_PRICE_THRESHOLD:
            # 高額購入 → 5%還元
            return int(price * PREMIUM_RATE)
        else:
            # 通常購入 → 3%還元
            return int(price * MEMBER_RATE)
    else:
        # 非会員 → 1%還元
        return int(price * GUEST_RATE)
```

</details>

---

## 7. まとめ

### 🎯 新人エンジニアが覚えるべき5つのポイント

1. **docstringは必ず書く**
   - 関数・クラスの「何をするか」を説明
   - Googleスタイル + 型ヒントが推奨

2. **コメントは「なぜ」を書く**
   - 「何を」はコードを見ればわかる
   - ビジネスロジックや意図を説明

3. **マジックナンバーは定数化**
   - 数値の意味を名前で表現
   - コメントで補足説明

4. **TODO・FIXMEを活用**
   - 課題を明確に記録
   - チーム全体で共有

5. **コメントも保守する**
   - コード変更時はコメントも更新
   - 古いコメントは削除

### 📝 今日から実践！

```python
# ✅ 今日から使えるテンプレート
def your_function(arg1: type, arg2: type = default) -> return_type:
    """
    1行で関数の目的を説明
    
    詳しい説明（必要に応じて）
    
    Args:
        arg1: 引数の説明
        arg2: 引数の説明。デフォルトは〇〇
    
    Returns:
        返り値の説明
    
    Raises:
        ExceptionType: 例外が発生する条件
    
    Example:
        >>> your_function(1, 2)
        3
    """
    # ステップ1: バリデーション
    # ...
    
    # ステップ2: メイン処理
    # ...
    
    # ステップ3: 結果を返す
    return result
```

**🐰 うさうさ店長より:**

「コメントは将来の自分へのラブレターです！

3ヶ月後に自分のコードを見て
『これ何してるんだっけ？』
とならないように、今のうちに丁寧に書きましょう！

最初は時間がかかりますが、
慣れれば自然に書けるようになります。



#===========================================-
# ====================================
# 5大記法 書き換え実践
# デバッグプリント完全版
# 何をしているか完全に見える
# ====================================
# """

# ====================================
# パターン1: PEP 257 から書き換えhelp( calc_original_pep)
# ====================================

print("=" * 70)
print("【パターン1】PEP 257 → 他の4記法へ書き換え")
print("=" * 70)


# ----- 元: PEP 257 -----
def calc_original_pep(x, y):
    """2つの数を足し算する。"""
    # 【この関数の目的】
    # - 2つの整数を受け取る
    # - 足し算する
    # - 結果を返す

    print(f"  [PEP257元] 実行: {x} + {y}")  # デバッグ
    result = x + y  # 計算
    print(f"  [PEP257元] 結果: {result}")  # デバッグ
    return result


print("\n--- PEP 257 → Google への書き換え ---")


def calc_pep_to_google(x, y):
    """
    2つの数を足し算する。

    Args:
        x (int): 1つ目の数
        y (int): 2つ目の数

    Returns:
        int: x + y の結果
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # Google: 概要 + Args + Returns

    print(f"  [Google版] 実行: {x} + {y}")
    print(f"  [Google版] 引数x={x}, y={y} を足し算")
    result = x + y
    print(f"  [Google版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → Google")
    return result


print("\n--- PEP 257 → NumPy への書き換え ---")


def calc_pep_to_numpy(x, y):
    """
    2つの数を足し算する。

    Parameters
    ----------
    x : int
        1つ目の数
    y : int
        2つ目の数

    Returns
    -------
    int
        x + y の結果
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # NumPy: 概要 + Parameters + ハイフン + Returns

    print(f"  [NumPy版] 実行: {x} + {y}")
    print(f"  [NumPy版] Parameters形式で引数を記述")
    result = x + y
    print(f"  [NumPy版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → NumPy")
    return result


print("\n--- PEP 257 → reST への書き換え ---")


def calc_pep_to_rest(x, y):
    """
    2つの数を足し算する。!

    :param x: 1つ目の数
    :type x: int
    :param y: 2つ目の数
    :type y: int
    :return: x + y の結果
    :rtype: int
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # reST: 概要 + :param/:type + :return/:rtype

    print(f"  [reST版] 実行: {x} + {y}")
    print(f"  [reST版] :param と :type で引数を2行ずつ記述")
    result = x + y
    print(f"  [reST版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → reST")
    return result


print("\n--- PEP 257 → Epytext への書き換え ---")


def calc_pep_to_epytext(x, y):
    """
    2つの数を足し算する。

    @param x: 1つ目の数
    @type x: int
    @param y: 2つ目の数
    @type y: int
    @return: x + y の結果
    @rtype: int
    """
    # 【書き換え内容】
    # PEP 257: """2つの数を足し算する。"""
    #    ↓
    # Epytext: 概要 + @param/@type + @return/@rtype

    print(f"  [Epytext版] 実行: {x} + {y}")
    print(f"  [Epytext版] @ 記法で記述（レガシー）")
    result = x + y
    print(f"  [Epytext版] 結果: {result}")
    print(f"  [書き換え成功] PEP 257 → Epytext")
    return result


# テスト実行
print("\n▼ パターン1のテスト実行")
x, y = 10, 5
print(f"入力値: x={x}, y={y}\n")

print("1-0. 元のPEP 257:")
calc_original_pep(x, y)

print("\n1-1. PEP 257 → Google:")
calc_pep_to_google(x, y)

print("\n1-2. PEP 257 → NumPy:")
calc_pep_to_numpy(x, y)

print("\n1-3. PEP 257 → reST:")
calc_pep_to_rest(x, y)

print("\n1-4. PEP 257 → Epytext:")
calc_pep_to_epytext(x, y)


# ====================================
# パターン2: Google から書き換え
# ====================================

print("\n\n" + "=" * 70)
print("【パターン2】Google → 他の4記法へ書き換え")
print("=" * 70)


# ----- 元: Google -----
def calc_original_google(x, y, z=10):
    """
    (x / y) + z を計算する。

    Args:
        x (float): 割られる数
        y (float): 割る数
        z (float, optional): 加算する数。デフォルトは10

    Returns:
        float: 計算結果

    Raises:
        ValueError: yが0の場合
    """
    # 【この関数の目的】
    # - xをyで割る
    # - zを足す
    # - yが0ならエラー

    print(f"  [Google元] 実行: ({x} / {y}) + {z}")
    if y == 0:
        print(f"  [Google元] エラー: yが0です")
        raise ValueError("yは0以外")

    result = x / y + z
    print(f"  [Google元] 結果: {result}")
    return result


print("\n--- Google → PEP 257 への書き換え ---")


def calc_google_to_pep(x, y, z=10):
    """(x / y) + z を計算する。"""
    # 【書き換え内容】
    # Google: 概要 + Args + Returns + Raises
    #    ↓
    # PEP 257: 概要のみ（詳細情報は削除）

    print(f"  [PEP257版] 実行: ({x} / {y}) + {z}")
    print(f"  [PEP257版] 簡略化（引数・戻り値の説明を削除）")

    if y == 0:
        print(f"  [PEP257版] エラー: yが0です")
        raise ValueError("yは0以外")

    result = x / y + z
    print(f"  [PEP257版] 結果: {result}")
    print(f"  [書き換え成功] Google → PEP 257")
    return result


print("\n--- Google → NumPy への書き換え ---")


def calc_google_to_numpy(x, y, z=10):
    """
    (x / y) + z を計算する。

    Parameters
    ----------
    x : float
        割られる数
    y : float
        割る数
    z : float, optional
        加算する数。デフォルトは10

    Returns
    -------
    float
        計算結果

    Raises
    ------
    ValueError
        yが0の場合
    """
    # 【書き換え内容】
    # Google: Args: + Returns: + Raises:
    #    ↓
    # NumPy: Parameters + ハイフン + Returns + Raises

    print(f"  [NumPy版] 実行: ({x} / {y}) + {z}")
    print(f"  [NumPy版] Args→Parameters, ハイフン追加, インデント形式")

    if y == 0:
        print(f"  [NumPy版] エラー: yが0です")
        raise ValueError("yは0以外")

    result = x / y + z
    print(f"  [NumPy版] 結果: {result}")
    print(f"  [書き換え成功] Google → NumPy")
    return result


print("\n--- Google → reST への書き換え ---")


def calc_google_to_rest(x, y, z=10):
    """
    (x / y) + z を計算する。

    :param x: 割られる数
    :type x: float
    :param y: 割る数
    :type y: float
    :param z: 加算する数（デフォルト: 10）
    :type z: float
    :return: 計算結果
    :rtype: float
    :raises ValueError: yが0の場合
    """
    # 【書き換え内容】
    # Google: x (float): 説明
    #    ↓
    # reST: :param x: 説明 + :type x: float（2行に分割）

    print(f"  [reST版] 実行: ({x} / {y}) + {z}")
    print(f"  [reST版] 各引数を :param と :type の2行で記述")

    if y == 0:
        print(f"  [reST版] エラー: yが0です")
        raise ValueError("yは0以外")

    result = x / y + z
    print(f"  [reST版] 結果: {result}")
    print(f"  [書き換え成功] Google → reST")
    return result


print("\n--- Google → Epytext への書き換え ---")


def calc_google_to_epytext(x, y, z=10):
    """
    (x / y) + z を計算する。

    @param x: 割られる数
    @type x: float
    @param y: 割る数
    @type y: float
    @param z: 加算する数（デフォルト: 10）
    @type z: float
    @return: 計算結果
    @rtype: float
    @raise ValueError: yが0の場合
    """
    # 【書き換え内容】
    # reST: :param, :type, :return, :rtype, :raises
    #    ↓
    # Epytext: @param, @type, @return, @rtype, @raise

    print(f"  [Epytext版] 実行: ({x} / {y}) + {z}")
    print(f"  [Epytext版] : を @ に置き換え")

    if y == 0:
        print(f"  [Epytext版] エラー: yが0です")
        raise ValueError("yは0以外")

    result = x / y + z
    print(f"  [Epytext版] 結果: {result}")
    print(f"  [書き換え成功] Google → Epytext")
    return result


# テスト実行
print("\n▼ パターン2のテスト実行")
x2, y2, z2 = 20.0, 4.0, 10.0
print(f"入力値: x={x2}, y={y2}, z={z2}\n")

print("2-0. 元のGoogle:")
calc_original_google(x2, y2, z2)

print("\n2-1. Google → PEP 257:")
calc_google_to_pep(x2, y2, z2)

print("\n2-2. Google → NumPy:")
calc_google_to_numpy(x2, y2, z2)

print("\n2-3. Google → reST:")
calc_google_to_rest(x2, y2, z2)

print("\n2-4. Google → Epytext:")
calc_google_to_epytext(x2, y2, z2)


# ====================================
# パターン3: NumPy から書き換え
# ====================================

print("\n\n" + "=" * 70)
print("【パターン3】NumPy → 他の4記法へ書き換え")
print("=" * 70)


# ----- 元: NumPy -----
def calc_original_numpy(values):
    """
    リストの統計を計算する。

    Parameters
    ----------
    values : list of float
        数値のリスト

    Returns
    -------
    mean : float
        平均値
    total : float
        合計値
    """
    # 【この関数の目的】
    # - リストを受け取る
    # - 平均と合計を計算
    # - タプルで返す

    print(f"  [NumPy元] 実行: values={values}")
    total = sum(values)
    mean = total / len(values)
    print(f"  [NumPy元] 合計={total}, 平均={mean}")
    return mean, total


print("\n--- NumPy → PEP 257 への書き換え ---")


def calc_numpy_to_pep(values):
    """リストの統計を計算する。"""
    # 【書き換え内容】
    # NumPy: Parameters + ハイフン + Returns
    #    ↓
    # PEP 257: 概要のみ

    print(f"  [PEP257版] 実行: values={values}")
    print(f"  [PEP257版] 詳細削除（概要のみ残す）")

    total = sum(values)
    mean = total / len(values)
    print(f"  [PEP257版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → PEP 257")
    return mean, total


print("\n--- NumPy → Google への書き換え ---")


def calc_numpy_to_google(values):
    """
    リストの統計を計算する。

    Args:
        values (list of float): 数値のリスト

    Returns:
        tuple: (mean, total) のタプル
            mean (float): 平均値
            total (float): 合計値
    """
    # 【書き換え内容】
    # NumPy: values : list of float (次の行に説明)
    #    ↓
    # Google: values (list of float): 説明（1行にまとめる）

    print(f"  [Google版] 実行: values={values}")
    print(f"  [Google版] ハイフン削除, 1行形式に変換")

    total = sum(values)
    mean = total / len(values)
    print(f"  [Google版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → Google")
    return mean, total


print("\n--- NumPy → reST への書き換え ---")


def calc_numpy_to_rest(values):
    """
    リストの統計を計算する。

    :param values: 数値のリスト
    :type values: list of float
    :return: (mean, total) のタプル
    :rtype: tuple
    """
    # 【書き換え内容】
    # NumPy: values : list of float (ハイフン + インデント)
    #    ↓
    # reST: :param values: + :type values: (2行形式)

    print(f"  [reST版] 実行: values={values}")
    print(f"  [reST版] ハイフン削除, :param/:type形式")

    total = sum(values)
    mean = total / len(values)
    print(f"  [reST版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → reST")
    return mean, total


print("\n--- NumPy → Epytext への書き換え ---")


def calc_numpy_to_epytext(values):
    """
    リストの統計を計算する。

    @param values: 数値のリスト
    @type values: list of float
    @return: (mean, total) のタプル
    @rtype: tuple
    """
    # 【書き換え内容】
    # reST: :param, :type, :return, :rtype
    #    ↓
    # Epytext: @param, @type, @return, @rtype

    print(f"  [Epytext版] 実行: values={values}")
    print(f"  [Epytext版] : を @ に置き換え")

    total = sum(values)
    mean = total / len(values)
    print(f"  [Epytext版] 合計={total}, 平均={mean}")
    print(f"  [書き換え成功] NumPy → Epytext")
    return mean, total


# テスト実行
print("\n▼ パターン3のテスト実行")
values = [10.0, 20.0, 30.0]
print(f"入力値: values={values}\n")

print("3-0. 元のNumPy:")
calc_original_numpy(values)

print("\n3-1. NumPy → PEP 257:")
calc_numpy_to_pep(values)

print("\n3-2. NumPy → Google:")
calc_numpy_to_google(values)

print("\n3-3. NumPy → reST:")
calc_numpy_to_rest(values)

print("\n3-4. NumPy → Epytext:")
calc_numpy_to_epytext(values)


# ====================================
# 最終まとめ
# ====================================

print("\n\n" + "=" * 70)
print("【最終まとめ】全パターンの書き換え完了")
print("=" * 70)
print(
    """
✅ パターン1: PEP 257 → 他の4記法（完了）
✅ パターン2: Google → 他の4記法（完了）
✅ パターン3: NumPy → 他の4記法（完了）

【書き換えのポイント】
- PEP 257: 概要のみ（最小限）
- Google: Args/Returns形式（読みやすい）
- NumPy: ハイフン + インデント（表形式）
- reST: :記法 + 2行ずつ（Sphinx用）
- Epytext: @記法（レガシー）

【デバッグプリントで確認できたこと】
✓ 各関数が何をしているか
✓ 書き換え前後の違い
✓ 実行結果が正しいか
✓ 書き換えが成功したか

新人エンジニアの皆さん、頑張ってください！
"""
)


#==================================


頑張ってください！」
