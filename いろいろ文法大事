完璧なテーマですね🐰✨
ここでは、**「階層継承 × 多重継承 × クラス変数 × インスタンス変数 × static（静的メソッド） × self」**を
新人エンジニア向けにシンプルで直感的に理解できるよう整理して解説します💡

---

# 🧩 Pythonクラスの基礎をまとめて理解しよう！

## ～階層継承・多重継承・クラス変数・インスタンス変数・self・@staticmethod～

---

## 🍡 1. クラス変数 vs インスタンス変数

まずは基本から！

```python
class Daifuku:
    store_name = "ふわふわ大福店"   # 🏪 クラス変数（全員で共有）

    def __init__(self, flavor, price):
        self.flavor = flavor        # 🍓 インスタンス変数（個別の大福が持つ）
        self.price = price

a = Daifuku("いちご", 150)
b = Daifuku("抹茶", 180)

print(Daifuku.store_name)  # ふわふわ大福店（クラスから）
print(a.store_name)        # ふわふわ大福店（インスタンスからも参照できる）
print(a.flavor, b.flavor)  # いちご 抹茶
```

🧠 **ポイント：**

| 種類       | 定義場所          | 共有範囲        | 例         |
| -------- | ------------- | ----------- | --------- |
| クラス変数    | クラス直下         | 全インスタンスで共有  | 店名、共通設定など |
| インスタンス変数 | `__init__()`内 | 各インスタンスごとに別 | 味・値段など    |

---

## 🧬 2. self とは？

```python
class Daifuku:
    def __init__(self, flavor):
        self.flavor = flavor  # ← 自分自身の「大福」に味を記録

    def show_flavor(self):
        print(f"私は {self.flavor} 大福です！")

a = Daifuku("いちご")
a.show_flavor()  # self は a を指す
```

> ✅ `self` は「自分自身（インスタンス）」を指す特別な変数。
> メソッドの中から**自分のデータ（属性）にアクセス**するために使います。

---

## 🧱 3. 階層継承（親 → 子 → 孫）

```python
class BaseDaifuku:
    def info(self):
        print("基本の大福です")

class StrawberryDaifuku(BaseDaifuku):
    def info(self):
        super().info()  # 親のメソッド呼び出し
        print("🍓 いちご味です")

class PremiumDaifuku(StrawberryDaifuku):
    def info(self):
        super().info()
        print("💎 高級いちご大福です")

p = PremiumDaifuku()
p.info()
```

🧠 **実行結果：**

```
基本の大福です
🍓 いちご味です
💎 高級いちご大福です
```

👉 **階層継承**では、`super()`で親クラスの処理を順番に呼び出せます。

---

## 🧩 4. 多重継承（複数の親）

```python
class Sweet:
    def taste(self):
        print("甘いです")

class Soft:
    def texture(self):
        print("やわらかいです")

class Mochi(Sweet, Soft):
    pass

m = Mochi()
m.taste()    # Sweetから継承
m.texture()  # Softから継承
```

🧠 **ポイント：**

* **多重継承**＝複数の親を持てる。
* **MRO（Method Resolution Order）**で親の呼ばれる順序が決まる。

  ```python
  print(Mochi.__mro__)
  # (<class '__main__.Mochi'>, <class '__main__.Sweet'>, <class '__main__.Soft'>, <class 'object'>)
  ```

---

## ⚙️ 5. @staticmethod（静的メソッド）

```python
class Calculator:
    @staticmethod
    def add(a, b):
        return a + b

print(Calculator.add(3, 5))  # 8
```

🧠 **特徴：**

| 項目    | 内容                                |
| ----- | --------------------------------- |
| 使い方   | `@staticmethod` デコレーター            |
| 引数    | `self` を受け取らない                    |
| 用途    | 状態に依存しない共通処理をまとめる（例：計算、フォーマットなど）  |
| 呼び出し方 | `クラス名.メソッド()` または `インスタンス.メソッド()` |

---

## 💡 6. まとめ（MECE表）

| 分類                 | キーワード    | 意味                | 例                     |
| ------------------ | -------- | ----------------- | --------------------- |
| **① クラス変数**        | 共有属性     | 全インスタンスで共通        | `store_name = "..."`  |
| **② インスタンス変数**     | 個別属性     | 各オブジェクト固有         | `self.flavor = "..."` |
| **③ self**         | 自分自身     | インスタンスを指す         | `self.price`          |
| **④ staticmethod** | 静的メソッド   | 状態に依存しない関数        | `@staticmethod`       |
| **⑤ 階層継承**         | 親→子→孫    | `super()` で順に呼び出す | `class C(B): pass`    |
| **⑥ 多重継承**         | 親を複数     | 複数の機能を継承          | `class C(A,B): pass`  |
| **⑦ MRO**          | メソッド探索順序 | 親の優先順位を確認         | `Class.__mro__`       |

---

## 🐇 ふわふわ大福店のたとえ

| 概念           | たとえ                 |
| ------------ | ------------------- |
| クラス変数        | お店全体の「看板」           |
| インスタンス変数     | 各大福の「味と値段」          |
| self         | 自分自身（大福そのもの）        |
| staticmethod | 大福に関係ない共通処理（例：価格計算） |
| 階層継承         | 代々続く大福屋のレシピ伝承       |
| 多重継承         | 和菓子＋洋菓子のハイブリッドレシピ   |

---

ご希望あれば、
この内容を「🐰Pythonクラスを大福で学ぶ」シリーズとしてQiita風に整形して出します！
（見出し＋解説＋実行例＋まとめ付き）
作りますか？



いい質問です🐰✨
ここでは、**「グローバルスコープ」「ローカルスコープ」「関数内関数（ネスト関数）」**について、
新人エンジニアでも一目で理解できるように、たとえ＋実行例＋図解風に説明します👇

---

# 🎯 Pythonスコープと関数の仕組みをやさしく理解しよう！

## 🌍 1. スコープとは？

> **スコープ(scope)** とは、「変数が使える範囲（有効範囲）」のこと。

Pythonでは、変数には主に2つのスコープがあります。

| 種類            | 意味       | 有効範囲    | 宣言場所 |
| ------------- | -------- | ------- | ---- |
| **グローバルスコープ** | 全体で使える変数 | プログラム全体 | 関数の外 |
| **ローカルスコープ**  | 関数の中だけ有効 | 関数内部のみ  | 関数の中 |

---

## 🍡 2. グローバルスコープとローカルスコープの例

```python
shop_name = "ふわふわ大福店"  # 🌍 グローバル変数（どこでも使える）

def show_shop():
    greeting = "いらっしゃいませ！"  # 🎯 ローカル変数（関数内だけ）
    print(greeting)
    print(shop_name)  # グローバル変数も参照できる

show_shop()

print(shop_name)  # OK（外でも使える）
# print(greeting)  # ❌ エラー！関数内でしか使えない
```

🧠 **結果**

```
いらっしゃいませ！
ふわふわ大福店
```

---

## 🚫 3. ローカル変数からグローバル変数を上書きできる？

```python
count = 0  # 🌍 グローバル変数

def sell():
    count = 10  # 🎯 ローカル変数（別物）
    print("関数内:", count)

sell()
print("関数外:", count)
```

🧠 **結果**

```
関数内: 10
関数外: 0
```

> 同じ名前でも、**関数内の変数は外の変数とは別物**です。

---

## 🧩 4. グローバル変数を書き換えたいとき

関数内から**外の変数（グローバル）を書き換えたい**ときは、
`global` キーワードを使います。

```python
count = 0

def sell():
    global count  # ← これで外の変数を使うと宣言
    count += 1
    print(f"販売数: {count}")

sell()
sell()
print("最終:", count)
```

🧠 **結果**

```
販売数: 1
販売数: 2
最終: 2
```

> ただし、**globalは多用するとバグの原因**になります。
> （値がどこで変わったかわかりにくくなる）

---

## 🏗 5. 関数内関数（ネスト関数）

> 関数の中に関数を作ることができます。
> 内側の関数は、外側の変数（ローカルスコープ）にもアクセスできます。

```python
def daifuku_shop():
    shop_name = "ふわふわ大福店"

    def sell(item):
        print(f"{shop_name}で{item}を販売しました")

    sell("いちご大福")

daifuku_shop()
```

🧠 **結果**

```
ふわふわ大福店でいちご大福を販売しました
```

> 内側の関数（`sell`）は、外側の関数の変数（`shop_name`）を使えます。
> これを **「クロージャ（closure）」** と呼ぶこともあります。

---

## 🧠 6. スコープの探索順序（LEGBルール）

Pythonは変数を探すとき、次の順で探します👇

| 順番    | スコープ      | 意味                    |
| ----- | --------- | --------------------- |
| **L** | Local     | 関数内で定義された変数           |
| **E** | Enclosing | 関数内関数の外側関数の変数         |
| **G** | Global    | モジュール全体の変数            |
| **B** | Built-in  | 組み込み関数（print, len など） |

🔍 これを **LEGBルール** と呼びます。

---

## 🧩 7. まとめ（MECE表）

| 分類 | スコープ名     | 有効範囲     | 宣言場所  | 書き換え            |
| -- | --------- | -------- | ----- | --------------- |
| ①  | グローバルスコープ | プログラム全体  | 関数の外  | `global`で操作可能   |
| ②  | ローカルスコープ  | 関数内      | 関数内   | 自動で閉じる          |
| ③  | 関数内関数スコープ | 外関数の内側   | 関数内関数 | `nonlocal`で操作可能 |
| ④  | 組み込みスコープ  | Python全体 | 自動    | 変更不可            |

---

## 🐇 ふわふわ大福店のたとえ

| 概念      | たとえ                         |
| ------- | --------------------------- |
| グローバル変数 | お店全体で共有する在庫情報               |
| ローカル変数  | 店員さん（関数）が自分の持ち場で使うメモ        |
| 関数内関数   | バックヤードで働く店員さんの補助係           |
| global  | 「店長、在庫表を直接書き換えます！」宣言        |
| LEGBルール | 「近くの棚 → 倉庫 → 店 → メーカー」の順で探す |

---

もし希望があれば、この内容を
「🐰Pythonスコープとネスト関数を大福屋で学ぶ」Qiita風記事
として整形（見出し＋コード＋図解風解説）にできます。

作成しましょうか？

